# -*- coding: utf-8 -*-
#
# Gramps - a GTK+/GNOME based genealogy program
#
# Copyright (C) 2013  Benny Malengier
# Copyright (C) 2013       Tim G L Lyons
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

# $Id$

"""
Provide the different Source Attribute Types for Gramps.
"""

#-------------------------------------------------------------------------
#
# Standard Python modules
#
#-------------------------------------------------------------------------
from ..const import GRAMPS_LOCALE as glocale
_ = glocale.translation.gettext
#-------------------------------------------------------------------------
#
# GRAMPS modules
#
#-------------------------------------------------------------------------
from .grampstype import GrampsType

#-------------------------------------------------------------------------
#
# Classes
#
#-------------------------------------------------------------------------

class SrcAttributeType(GrampsType):
    """
    Sources/citations have many predefined attribute types. We follow here 
    Elizabeth Shown Mills fields. 
    
    For several of the types, predefined values are possible, which are
    localized. The English version will be stored.
    """

    # PREDEFINED TYPES
    UNKNOWN     = -1
    CUSTOM      = 0
    _DATAMAP = [
        (UNKNOWN     , _("Unknown"), "Unknown"),
        (CUSTOM      , _("Custom"), "Custom"),
                ]

    # All the SrcAttributeTypes are specified as CUSTOM attributes. This is to
    # allow users complete control over the attributes that are present so they
    # need only have exactly those attributes that they want. Other attributes
    # are only defined in source/citation templates.
    
    # N.B. The attribute values are specified as strings, rather than the
    # integers that would be normal for normal pre-defined attributes
    
    # Some attributes are used internally in core Gramps and so are defined
    # here.
    
    # The following attributes are used in GEDCOM import and upgrade of
    # databases from Gramps versions prior to 4.1 (including xml import). If no
    # GEDCOM files are imported, they don't need to be defined.
    TITLE = "Title"
    AUTHOR = "Author"
    PUB_INFO = "Pub_info"
    PAGE = "Page"
    
    # The following are used in GEDCOM import and export
    EVEN_CITED = "Event Type Used for Citation" # GEDCOM EVENT_TYPE_CITED_FROM
    EVEN_ROLE = "Role in Event Cited from" # GEDCOM ROLE_IN_EVENT
    
    # The following is used in GEDCOM import only
    GEN_BY = "Generated by" # Generated sources on import
    
    # The following probably should be used in GEDCOM import and export, but
    # don't appear there yet
    EVEN_REC = "Events Recorded in Source"  # GEDCOM EVENTS_RECORDED
    
    # The following are special cased in template processing
    REPOSITORY = "Repository"
    REPOSITORY_ADDRESS = "Repository address"
    REPOSITORY_SHORT_VERSION = "Repository (Short)"
    REPOSITORY_CALL_NUMBER = "Repository call number"
    DATE = "Date"
    
    # All the special case attributes need to be specified as translatable
    # strings so they can be picked up during extraction of translatable strings
    if False:
        _("Title")
        _("Author")
        _("Pub_info")
        _("Page")
        _("Event Type Used for Citation")
        _("Role in Event Cited from")
        _("Generated by")
        _("Events Recorded in Source")
        _("Repository")
        _("Repository address")
        _("Repository (Short)")
        _("Repository call number")
        _("Date")
    
    _CUSTOM = CUSTOM
#    _DEFAULT = TITLE

    _DATAMAPIGNORE = [
        "Act (Short)",
        "Author (Short)",
        "Book (Short)",
        "Case (Short)",
        "Cemetery (Short)",
        "Collection (Short)",
        "Column (Short)",
        "Compiler (Short)",
        "Creation date (Short)",
        "Creator (Short)",
        "Date (Short)",
        "District (Short)",
        "Division (Short)",
        "Editor (Short)",
        "File date (Short)",
        "File no. (Short)",
        "File (Short)",
        "File unit (Short)",
        "Group (Short)",
        "Household (Short)",
        "Id (Short)",
        "Institution (Short)",
        "Issue date (Short)",
        "Item of interest (Short)",
        "Jurisdiction (Short)",
        "Location (Short)",
        "Number (Short)",
        "Page (Short)",
        "Position (Short)",
        "Publication title (Short)",
        "Publication year (Short)",
        "Recipient (Short)",
        "Report date (Short)",
        "Research comment (Short)",
        "Roll (Short)",
        "Schedule (Short)",
        "Section (Short)",
        "Series no. (Short)",
        "Series (Short)",
        "Session (Short)",
        "Sheet no. (Short)",
        "Subject (Short)",
        "Subseries (Short)",
        "Term (Short)",
        "Timestamp (Short)",
        "Title (Short)",
        "Type (Short)",
        "Volume (Short)",
        "Website (Short)",
        "Year (Short)",
    ]

    def __init__(self, value=None):
        GrampsType.__init__(self, value)
 
    def get_ignore_list(self, exception=None):
        """
        Return a list of the types to ignore and not include in default lists.
        
        Exception is a sublist of types that may not be ignored
        
        :param exception: list of integer values corresponding with types that
            have to be excluded from the ignore list
        :type exception: list
        :returns: list of integers corresponding with the types to ignore when 
            showing a list of different NoteType's
        :rtype: list
        
        """
        ignlist = [x for x in self._DATAMAPIGNORE]
        if exception:
            for type_ in exception:
                try: 
                    del ignlist[ignlist.index(type_)]
                except ValueError:
                    pass
        return ignlist
