#
# Gramps - a GTK+/GNOME based genealogy program
#
# Copyright (C) 2007  Brian G. Matherly
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# $Id$

"""
Abstracted option handling.
"""
#------------------------------------------------------------------------
#
# gtk
#
#------------------------------------------------------------------------
import gtk

#-------------------------------------------------------------------------
#
# gramps modules
#
#-------------------------------------------------------------------------
import _ReportUtils as ReportUtils
from _ReportOptions import ReportOptions

#-------------------------------------------------------------------------
#
# Option class
#
#-------------------------------------------------------------------------
class Option:
    """
    This class serves as a base class for all options. All Options must 
    minimally provide the services provided by this class. Options are allowed 
    to add additional functionality.
    """
    def __init__(self,label,value):
        """
        @param label: A friendly label to be applied to this option.
            Example: "Exclude living people"
        @type label: string
        @param value: An initial value for this option.
            Example: True
        @type value: The type will depend on the type of option.
        @return: nothing
        """
        self.__value = value
        self.__label = label
        self.__help_str = ""
        
    def get_label(self):
        """
        Get the friendly label for this option.
        
        @return: string
        """
        return self.__label
    
    def set_label(self,label):
        """
        Set the friendly label for this option.
        
        @param label: A friendly label to be applied to this option.
            Example: "Exclude living people"
        @type label: string
        @return: nothing
        """
        self.__label = label
        
    def get_value(self):
        """
        Get the value of this option.
        
        @return: The option value.
        """
        return self.__value
    
    def set_value(self,value):
        """
        Set the value of this option.
        
        @param value: A value for this option.
            Example: True
        @type value: The type will depend on the type of option.
        @return: nothing
        """
        self.__value = value
        
    def get_help(self):
        """
        Get the help information for this option.
        
        @return: A string that provides additional help beyond the label.
        """
        return self.__help_str
        
    def set_help(self,help):
        """
        Set the help information for this option.
        
        @param help: A string that provides additional help beyond the label.
            Example: "Whether to include or exclude people who are calculated 
            to be alive at the time of the generation of this report"
        @type value: string
        @return: nothing
        """
        self.__help_str = help
        
#-------------------------------------------------------------------------
#
# StringOption class
#
#-------------------------------------------------------------------------
class StringOption(Option):
    """
    This class describes an option that is a simple one-line string.
    """
    def __init__(self,label,value):
        """
        @param label: A friendly label to be applied to this option.
            Example: "Page header"
        @type label: string
        @param value: An initial value for this option.
            Example: "Generated by GRAMPS"
        @type value: string
        @return: nothing
        """
        Option.__init__(self,label,value)
        
#-------------------------------------------------------------------------
#
# NumberOption class
#
#-------------------------------------------------------------------------
class NumberOption(Option):
    """
    This class describes an option that is a simple number with defined maximum 
    and minimum values.
    """
    def __init__(self,label,value,min,max):
        """
        @param label: A friendly label to be applied to this option.
            Example: "Number of generations to include"
        @type label: string
        @param value: An initial value for this option.
            Example: 5
        @type value: int
        @param min: The minimum value for this option.
            Example: 1
        @type min: int
        @param max: The maximum value for this option.
            Example: 10
        @type value: int
        @return: nothing
        """
        Option.__init__(self,label,value)
        self.__min = min
        self.__max = max
    
    def get_min(self):
        """
        Get the minimum value for this option.
        
        @return: an int that represents the minimum value for this option.
        """
        return self.__min
    
    def get_max(self):
        """
        Get the maximum value for this option.
        
        @return: an int that represents the maximum value for this option.
        """
        return self.__max

#-------------------------------------------------------------------------
#
# TextOption class
#
#-------------------------------------------------------------------------
class TextOption(Option):
    """
    This class describes an option that is a multi-line string.
    """
    def __init__(self,label,value):
        """
        @param label: A friendly label to be applied to this option.
            Example: "Page header"
        @type label: string
        @param value: An initial value for this option.
            Example: "Generated by GRAMPS\nCopyright 2007"
        @type value: string
        @return: nothing
        """
        Option.__init__(self,label,value)
        
#-------------------------------------------------------------------------
#
# BooleanOption class
#
#-------------------------------------------------------------------------
class BooleanOption(Option):
    """
    This class describes an option that is a boolean (True or False).
    """
    def __init__(self,label,value):
        """
        @param label: A friendly label to be applied to this option.
            Example: "Exclude living people"
        @type label: string
        @param value: An initial value for this option.
            Example: True
        @type value: boolean
        @return: nothing
        """
        Option.__init__(self,label,value)

#-------------------------------------------------------------------------
#
# EnumeratedListOption class
#
#-------------------------------------------------------------------------
class EnumeratedListOption(Option):
    """
    This class describes an option that provides a finite number of values.
    Each possible value is assigned a value and a description.
    """
    def __init__(self,label,value):
        """
        @param label: A friendly label to be applied to this option.
            Example: "Paper Size"
        @type label: string
        @param value: An initial value for this option.
            Example: 5
        @type value: int
        @return: nothing
        """
        Option.__init__(self,label,value)
        self.__items = []
        
    def add_item(self,value,description):
        """
        Add an item to the list of possible values.
        
        @param value: The value that corresponds to this item.
            Example: 5
        @type value: int
        @param description: A description of this value.
            Example: "8.5 x 11"
        @type description: string
        @return: nothing
        """
        self.__items.append((value, description))
        
    def get_items(self):
        """
        Get all the possible values for this option.
        
        @return: an array of tuples containing (value,description) pairs.
        """
        return self.__items

#-------------------------------------------------------------------------
#
# FilterListOption class
#
#-------------------------------------------------------------------------
class FilterListOption(Option):
    """
    This class describes an option that provides a finite list of filters.
    Each possible value is assigned a type of set of filters to use.
    """
    def __init__(self,label):
        """
        @param label: A friendly label to be applied to this option.
            Example: "Filter"
        @type label: string
        @return: nothing
        """
        Option.__init__(self,label,"")
        self.__items = []
        self.__filters = []

    def add_item(self,value):
        """
        Add an item to the list of possible values.
        
        @param value: A name of a set of filters.
            Example: "person"
        @type value: string
        @return: nothing
        """
        self.__items.append(value)

    def get_items(self):
        """
        Get all the possible values for this option.
        
        @return: an array of tuples containing (value,description) pairs.
        """
        return self.__items

    def add_filter(self, filter):
        """
        Add a filter set to the list.
        
        @param filter: A filter object.
            Example: <Filter>
        @type value: Filter
        @return: nothing
        """
        self.__filters.append(filter)

    def get_filters(self):
        """
        Get all of the filter objects.
        
        @type value: Filter
        @return: an array of filter objects
        """
        return self.__filters

#-------------------------------------------------------------------------
#
# Menu class
#
#-------------------------------------------------------------------------
class Menu:
    """
    Introduction
    ============
    A Menu is used to maintain a collection of options that need to be 
    represented to the user in a non-implementation specific way. The options
    can be described using the various option classes. A menu contains many
    options and associates them with a unique name and category.
    
    Usage
    =====
    Menus are used in the following way.

      1. Create a option object and configure all the attributes of the option.
      2. Add the option to the menu by specifying the option, name and category.
      3. Add as many options as necessary.
      4. When all the options are added, the menu can be stored and passed to
         the part of the system that will actually represent the menu to 
         the user.
    """
    def __init__(self):
        self.__options = {}
    
    def add_option(self,category,name,option):
        """
        Add an option to the menu.
        
        @param category: A label that describes the category that the option 
            belongs to. 
            Example: "Report Options"
        @type category: string
        @param name: A name that is unique to this option.
            Example: "generations"
        @type name: string
        @param option: The option instance to be added to this menu.
        @type option: Option
        @return: nothing
        """
        if not self.__options.has_key(category):
            self.__options[category] = []
        self.__options[category].append((name,option))
        
    def get_categories(self):
        """
        Get a list of categories in this menu.
        
        @return: a list of strings
        """
        categories = []
        for category in self.__options:
            categories.append(category)
        return categories
    
    def get_option_names(self,category):
        """
        Get a list of option names for the specified category.
        
        @return: a list of strings
        """
        names = []
        for (name,option) in self.__options[category]:
            names.append(name)
        return names
    
    def get_option(self,category,name):
        """
        Get an option with the specified category and name.
        
        @return: an Option instance or None on failure.
        """
        for (oname,option) in self.__options[category]:
            if oname == name:
                return option
        return None
    
    def get_all_option_names(self):
        """
        Get a list of all the option names in this menu.
        
        @return: a list of strings
        """
        names = []
        for category in self.__options:
            for (name,option) in self.__options[category]:
                names.append(name)
        return names
    
    def get_option_by_name(self,name):
        """
        Get an option with the specified name.
        
        @return: an Option instance or None on failure.
        """
        for category in self.__options.keys():
            for (oname,option) in self.__options[category]:
                if oname == name:
                    return option
        return None

#------------------------------------------------------------------------
#
# MenuOptions class
#
#------------------------------------------------------------------------
class MenuOptions(ReportOptions):
    """
    The MenuOptions class implementes the ReportOptions functionality in a 
    generic way so that the user does not need to be concerned with the 
    graphical representation of the options.
    
    The user should inherit the MenuOptions class and override the 
    add_menu_options function. The user can add options to the menu and the 
    MenuOptions class will worry about setting up the GUI.
    """
    def __init__(self,name,person_id=None):
        self.menu = Menu()
        ReportOptions.__init__(self,name, person_id)

    def make_default_style(self,default_style):
        pass

    def set_new_options(self):
        self.options_dict = {}
        self.options_help = {}
        
        self.add_menu_options(self.menu)

        for name in self.menu.get_all_option_names():
            option = self.menu.get_option_by_name(name)
            self.options_dict[name] = option.get_value()
            self.options_help[name] = option.get_help()

    def add_menu_options(self,menu):
        """
        Add the user defined options to the menu.
        
        @param menu: A menu class for the options to belong to.
        @type menu: Menu
        @return: nothing
        """
        raise NotImplementedError

    def add_user_options(self,dialog):
        self.gui = {}
        self.tooltips = gtk.Tooltips()
        
        for category in self.menu.get_categories():
            for name in self.menu.get_option_names(category):
                option = self.menu.get_option(category,name)
                otype = option.__class__
                
                if otype == NumberOption:
                    self.__add_number_option(category,name,option,dialog)
                elif otype == TextOption:
                    self.__add_text_option(category,name,option,dialog)
                elif otype == BooleanOption:
                    self.__add_boolean_option(category,name,option,dialog)
                elif otype == EnumeratedListOption:
                    self.__add_enumerated_list_option(category,name,option,
                                                      dialog) 
                elif otype == FilterListOption:
                    self.__add_filter_list_option(category,name,option,
                                                  dialog) 
                else:
                    raise NotImplementedError
                
    def parse_user_options(self,dialog):
        for name in self.menu.get_all_option_names():
            option = self.menu.get_option_by_name(name)
            otype = option.__class__
            
            if otype == NumberOption:
                self.__parse_number_option(name,option)
            elif otype == TextOption:
                self.__parse_text_option(name,option)
            elif otype == BooleanOption:
                self.__parse_boolean_option(name,option)
            elif otype == EnumeratedListOption:
                self.__parse_enumerated_list_option(name,option)
            elif otype == FilterListOption:
                self.__parse_filter_list_option(name,option)
            else:
                raise NotImplementedError
            
    def __add_number_option(self,category,name,option,dialog):
        """
        Add a NumberOption to the dialog.
        """
        adj = gtk.Adjustment(1,option.get_min(),option.get_max(),1)
        self.gui[name] = gtk.SpinButton(adj)
        self.gui[name].set_value(self.options_dict[name])
        dialog.add_frame_option(category,option.get_label(),self.gui[name])
        
        self.tooltips.set_tip(self.gui[name],option.get_help())
        
    def __parse_number_option(self,name,option):
        self.options_dict[name] = int(self.gui[name].get_value_as_int())
                
    def __add_text_option(self,category,name,option,dialog):
        """
        Add a TextOption to the dialog.
        """
        self.gui[name] = gtk.TextView()
        self.gui[name].get_buffer().set_text("\n".join(self.options_dict[name]))
        self.gui[name].set_editable(1)
        swin = gtk.ScrolledWindow()
        swin.set_shadow_type(gtk.SHADOW_IN)
        swin.set_policy(gtk.POLICY_AUTOMATIC,gtk.POLICY_AUTOMATIC)
        swin.add(self.gui[name])
        dialog.add_frame_option(category,option.get_label(),swin)
        
        # Required for tooltip
        self.gui[name].add_events(gtk.gdk.ENTER_NOTIFY_MASK)
        self.gui[name].add_events(gtk.gdk.LEAVE_NOTIFY_MASK)
        self.tooltips.set_tip(self.gui[name],option.get_help())
        
    def __parse_text_option(self,name,option):
        b = self.gui[name].get_buffer()
        text_val = unicode( b.get_text( b.get_start_iter(),
                                        b.get_end_iter(),
                                        False)             )
        self.options_dict[name] = text_val.split('\n')
        
    def __add_boolean_option(self,category,name,option,dialog):
        """
        Add a BooleanOption to the dialog.
        """
        self.gui[name] = gtk.CheckButton(option.get_label())
        self.gui[name].set_active(self.options_dict[name])
        dialog.add_frame_option(category,"",self.gui[name])
        
        self.tooltips.set_tip(self.gui[name],option.get_help())
        
    def __parse_boolean_option(self,name,option):
        self.options_dict[name] = self.gui[name].get_active()
        
    def __add_enumerated_list_option(self,category,name,option,dialog):
        """
        Add an EnumeratedListOption to the dialog.
        """
        active_index = 0
        current_index = 0 
        self.gui[name] = gtk.combo_box_new_text()
        for (value,description) in option.get_items():
            self.gui[name].append_text(description)
            if value == self.options_dict[name]:
                active_index = current_index
            current_index += 1
        self.gui[name].set_active( active_index )
        dialog.add_frame_option(category,option.get_label(),self.gui[name])
        
        self.tooltips.set_tip(self.gui[name],option.get_help())

    def __add_filter_list_option(self,category,name,option,dialog):
        """
        Add an FilterListOption to the dialog.
        """
        self.gui[name] = gtk.combo_box_new_text()
        for filter in option.get_items():
            if filter in ["person"]:
                filter_list = ReportUtils.get_person_filters(dialog.person,False)
                for filter in filter_list:
                    self.gui[name].append_text(filter.get_name())
                    option.add_filter(filter)
        self.gui[name].set_active(0)
        dialog.add_frame_option(category,option.get_label(),self.gui[name])
        self.tooltips.set_tip(self.gui[name],option.get_help())
        
    def __parse_enumerated_list_option(self,name,option):
        index = self.gui[name].get_active()
        items = option.get_items()
        value = items[index]
        self.options_dict[name] = value

    def __parse_filter_list_option(self,name,option):
        index = self.gui[name].get_active()
        items = option.get_filters()
        filter = items[index]
        self.options_dict[name] = filter
